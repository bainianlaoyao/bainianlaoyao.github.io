<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NAS搭建_2jellyfin</title>
    <link href="/2025/04/25/NAS%E6%90%AD%E5%BB%BA-2jellyfin/"/>
    <url>/2025/04/25/NAS%E6%90%AD%E5%BB%BA-2jellyfin/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>个人NAS搭建全指南[1] 全自动追番</title>
    <link href="/2025/04/25/NAS%E6%90%AD%E5%BB%BA-1%E5%85%A8%E8%87%AA%E5%8A%A8%E8%BF%BD%E7%95%AA/"/>
    <url>/2025/04/25/NAS%E6%90%AD%E5%BB%BA-1%E5%85%A8%E8%87%AA%E5%8A%A8%E8%BF%BD%E7%95%AA/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E5%BC%95%E8%A8%80">引言</a></li><li><a href="#%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D">原理介绍</a></li><li><a href="#qbittorrent">qbittorrent</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li></ul></li><li><a href="#%E8%AE%A2%E9%98%85">订阅</a><ul><li><a href="#ani-rss">ANI-RSS</a><ul><li><a href="#%E5%AE%89%E8%A3%85-1">安装</a></li></ul></li><li><a href="#autobangumi">AutoBangumi</a><ul><li><a href="#%E5%AE%89%E8%A3%85-2">安装</a></li><li><a href="#%E8%AE%BE%E7%BD%AE">设置</a></li></ul></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>现在市面上尚存的自动追番流程教学要么<a href="https://blog.17lai.site/posts/9912bd5d/">古老落灰</a>, 要么并不完善, 因此我决定写一篇关于自动追番的教程, 以便于后续的使用和维护. 本文将介绍如何使用<code>qbittorrent</code>、<code>ANI-RSS</code>和<code>AutoBangumi</code>来实现自动追番.</p><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><pre><code class=" mermaid">flowchart TB  subgraph 资源源    MikanRSS(&quot;Mikan RSS 源&quot;)  end  subgraph 订阅工具    ANI-RSS(&quot;ANI-RSS&quot;)    AutoBangumi(&quot;AutoBangumi&quot;)  end  subgraph 下载    QB(&quot;qBittorrent&quot;)  end  subgraph 存储    NAS存储(&quot;NAS 存储&quot;)  end  MikanRSS --&gt; ANI-RSS  MikanRSS --&gt; AutoBangumi  ANI-RSS --&gt; QB  AutoBangumi --&gt; QB  QB --&gt; NAS存储</code></pre><p>RSS(Really Simple Syndication)是一个非常古老的协议, 其原理是通过一个XML文件来描述一系列的链接, 例如视频、音频、图片等. 这个XML文件可以被任何支持RSS的客户端解析, 例如RSS阅读器、浏览器等. 通过RSS, 我们可以很方便地获取到最新的资源.</p><p>Mikan是一个非常优秀的追番网站, 其提供了一个RSS接口, 通过这个接口, 我们可以获取到最新的番剧资源. 但是, Mikan的RSS接口并不支持自动下载, 因此我们需要使用一些工具来实现自动下载.</p><p>本文将介绍两种自动追番工具用于订阅 Mikan, <code>ANI-RSS</code> 和<code>AutoBangumi</code>. 个人推荐<code>ANI-RSS</code>, 有更强大的功能, 更好的可视化和体验.</p><p>最后, 我们使用<code>qbittorrent</code>作为下载工具.</p><h2 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h2><p>qbittorrent是一个开源的BitTorrent客户端, 它支持多种操作系统, 包括Windows、Linux和macOS. 我们将在Docker中运行它.</p><blockquote><p>什么是Torrent?<br>Torrent是一种点对点的文件共享协议, 它允许用户在互联网上共享和下载文件. Torrent文件包含了文件的元数据和分布式哈希表, 使得用户之间可以相互分享文件, 也就是P2P协议.<br>而现在几乎所有的字幕组都使用Torrent来发布资源.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>创建<code>docker-compose.yml</code>文件</li><li>创建<code>config</code>文件夹</li><li>选择一个下载位置, 这个下载位置里会存放你的番剧, 如配置中的<code>~/NAS/media/jellyfin</code>, 你可以选择任何一个文件夹, 只要你有权限访问即可.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># docker-compose.yml (需要修改)</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">qbittorrent:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lscr.io/linuxserver/qbittorrent:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">qbittorrent</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Etc/UTC</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WEBUI_PORT=8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TORRENTING_PORT=64284</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">~/NAS/media/jellyfin:/downloads</span> <span class="hljs-comment">#optional</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span><br>    <span class="hljs-comment"># ports:</span><br>    <span class="hljs-comment">#   - 8080:8080</span><br>    <span class="hljs-comment">#   - 64284:64284</span><br>    <span class="hljs-comment">#   - 64284:64284/udp</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>随后使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><p>启动<code>qbittorrent</code>, 访问<code>http://localhost:8080</code>即可访问<code>qbittorrent</code>的WebUI, 默认用户名和密码均为<code>adminadmin</code>.</p><blockquote><p>注意: 如果你使用的是Docker Desktop, 你需要将<code>network_mode</code>改为<code>bridge</code>, 并将端口映射到宿主机上. 例如:</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">64284</span><span class="hljs-string">:64284</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-number">64284</span><span class="hljs-string">:64284/udp</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>你可以参照这个<a href="https://blog.17lai.site/posts/f6b32521/#%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0">qbittorrent的教程</a>尝试配置, 然而, 默认配置也可以使用, 只需要自行修改密码即可.</p><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><h3 id="ANI-RSS"><a href="#ANI-RSS" class="headerlink" title="ANI-RSS"></a>ANI-RSS</h3><p><a href="https://github.com/wushuo894/ani-rss">ANI-RSS(ASS)</a> 如前文介绍. </p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ul><li>新建<code>config</code>文件夹</li><li>新建<code>docker-compose.yaml</code><br>注意修改你的下载目录</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#docker-compose.yaml (需要修改)</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">ani-rss:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">ani-rss</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">~/NAS/media/jellyfin:/Media</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7789</span><span class="hljs-string">:7789</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PORT=7789</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">CONFIG=/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">extra_hosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;host.docker.internal:host-gateway&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>基础的设置可参阅<a href="https://docs.wushuo.top/add-rss">ASS的官方文档</a><br>对于我们在<code>docker</code>运行<code>qbittorrent</code>的情况, 将地址设置为<code>http://host.docker.internal:8080</code><br><img src="/2025/04/23/hello-world/image.png" alt="设置界面"></p><h3 id="AutoBangumi"><a href="#AutoBangumi" class="headerlink" title="AutoBangumi"></a>AutoBangumi</h3><p>虽然<code>AutoBangumi(AB)</code>被更多人使用, 但是很遗憾, 这已经是一个过时的软件了.</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><ul><li>创建<code>docker-compose.yaml</code></li><li>创建<code>config</code>文件夹</li><li>创建<code>data</code>文件夹</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># docker-compose.yaml (无须更改)</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">AutoBangumi:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;ghcr.io/estrellaxd/auto_bangumi:latest&quot;</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">AutoBangumi</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config:/app/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/app/data</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7892:7892&quot;</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">bridge</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">UMASK=022</span><br>    <span class="hljs-attr">extra_hosts:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;host.docker.internal:host-gateway&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>可参阅其<a href="https://www.autobangumi.org/changelog/3.1.html">官方文档</a>.<br>对qbittorrent地址的设置同理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此, 你应该参阅订阅工具的文档成功下载番剧了, 当你关注的字幕组更新后, 你的订阅工具就会自动使用qbittorrent把番剧下载到硬盘里, 哦对了, 赞美字幕组!</p><p>我会在下一篇文章中介绍如何在使用优雅的观看硬盘中的视频.</p><blockquote><p>本文档不能转载至B站</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>NAS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NAS</tag>
      
      <tag>动漫</tag>
      
      <tag>自动化</tag>
      
      <tag>docker</tag>
      
      <tag>linux</tag>
      
      <tag>RSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人NAS搭建全指南[0] 基础环境</title>
    <link href="/2025/04/24/NAS%E6%90%AD%E5%BB%BA-0%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/"/>
    <url>/2025/04/24/NAS%E6%90%AD%E5%BB%BA-0%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFnas">什么是NAS</a></li><li><a href="#nas%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">NAS的环境搭建</a><ul><li><a href="#%E7%A1%AC%E4%BB%B6">硬件</a><ul><li><a href="#%E8%87%AA%E7%BB%84%E8%A3%85pc">自组装PC</a><ul><li><a href="#cpu--gpu">CPU | GPU</a></li><li><a href="#%E7%A1%AC%E7%9B%98">硬盘</a></li><li><a href="#%E5%86%85%E5%AD%98">内存</a></li><li><a href="#%E4%B8%BB%E6%9D%BF">主板</a></li><li><a href="#%E7%BD%91%E7%BB%9C">网络</a></li></ul></li><li><a href="#%E7%A9%B6%E6%9E%81%E6%97%A0%E8%84%91%E6%96%B9%E6%A1%88">究极无脑方案</a></li><li><a href="#%E7%A9%B6%E6%9E%81%E6%97%A0%E8%84%91%E6%96%B9%E6%A1%882">究极无脑方案2</a></li></ul></li><li><a href="#os">OS</a><ul><li><a href="#windows">windows</a></li><li><a href="#linux">Linux</a><ul><li><a href="#%E7%83%A7%E5%BD%95iso">烧录iso</a></li><li><a href="#%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F">安装系统</a></li></ul></li></ul></li><li><a href="#%E8%BD%AF%E4%BB%B6">软件</a><ul><li><a href="#docker">Docker</a><ul><li><a href="#windows%E4%B8%8B%E5%AE%89%E8%A3%85docker">Windows下安装Docker</a></li><li><a href="#linux%E4%B8%8B%E5%AE%89%E8%A3%85docker">Linux下安装Docker</a></li><li><a href="#%E5%9B%BE%E5%BD%A2%E5%8C%96docker%E7%AE%A1%E7%90%86">图形化docker管理</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98">网络问题</a></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="什么是NAS"><a href="#什么是NAS" class="headerlink" title="什么是NAS"></a>什么是NAS</h2><p>狭义上来说, NAS是网络附加存储(Network Attached Storage)的缩写, 是一种专门用于数据存储的设备, 通过网络连接到计算机上, 允许多个用户和设备访问和共享存储资源。通常具有高容量、高性能和高可靠性, 适合用于家庭或企业的数据备份、文件共享和多媒体存储等场景。<br>但广义来说, 对于个人使用的NAS, NAS也兼具各种服务的功能, 例如私有云、媒体服务器、网页服务等, 甚至可以作为一个完整的服务器来使用。 也就是说, 现在一般意义上的个人NAS, 就是一个家庭服务器, 只不过大部分家庭服务器都有共通的NAS功能, 因此我们将家庭服务器称之为NAS.</p><p>而从硬件上来说, NAS绝不是什么特殊的设备, 只要是可以联网的计算机都可以作为NAS使用, 例如树莓派、旧电脑、甚至是路由器等。</p><h2 id="NAS的环境搭建"><a href="#NAS的环境搭建" class="headerlink" title="NAS的环境搭建"></a>NAS的环境搭建</h2><p>NAS的搭建方式多种多样, 例如使用专用的NAS设备、树莓派、旧电脑等。 本系列教程假设使用一般性的PC, 以拥抱开放的桌面软件生态, 不受厂商溢价所扰.</p><p>对于NAS的架构, 我们之前已经说过, 这本质就是一台 服务器 | 电脑, 因此具有如下架构, 我将自底向上讲解.</p><p><img src="/2025/04/23/hello-world/%E6%9E%B6%E6%9E%84.drawio.png" alt="NAS架构"></p><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><h4 id="自组装PC"><a href="#自组装PC" class="headerlink" title="自组装PC"></a>自组装PC</h4><p>如果你想要 搭建 | 重新利用 一台x86架构的普通PC作为NAS, 你需要准备如下硬件:</p><h5 id="CPU-GPU"><a href="#CPU-GPU" class="headerlink" title="CPU | GPU"></a>CPU | GPU</h5><p>NAS的性能要求不高, 特别是对于内网NAS. 一个树莓派足以胜任, 当然, 如果有闲置的旧电脑, 也可以利用起来. 只要是能开机的电脑, 一般都可以胜任.</p><p>如果你有公网ip, 想要让NAS胜任互联网视频播放任务, 建议使用一台带有显示芯片的电脑, 对于NAS最大的性能要求场景: 媒体服务器而言, 互联网上的播放由于带宽限制必须使用转码, 这个对视频的处理过程必须使用GPU完成, 例如 AMD 的APU或者Intel的核显, 这样可以使用硬件转码, 提升性能. 当然, 如果你有闲置的独显, 也可以使用独显进行转码. </p><p>而在内网的情况下, 由于带宽足够, 一般不需要转码, 只使用 CPU 即可. </p><h5 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h5><p>NAS对于硬盘速度要求并不高, 只要是固态硬盘和机械硬盘都可以使用, 如果你对于存储的安全性有要求, 建议使用机械硬盘加RAID, 如果你有多块硬盘, 也可以使用RAID来提高速度.</p><blockquote><p><a href="https://blog.csdn.net/qq_41819851/article/details/131106294">RAID</a>是冗余磁盘阵列(Redundant Array of Independent Disks)的缩写, 是一种将多个硬盘组合成一个逻辑单元的技术, 通过数据冗余和分布式存储来提高数据的可靠性和性能. RAID有多种级别, 例如RAID0、RAID1、RAID5等, 每种级别都有不同的特点.<br>由于RAID的复杂性, 本教程不涉及RAID的搭建, 只介绍如何使用单块硬盘搭建NAS.</p></blockquote><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>4G内存足够, ddr4内存即可, 更多提高边际效益明显, windows电脑可加至8G.</p><h5 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h5><p>随意选购, 只要是能开机的电脑都可以使用. 建议带2.5G网口</p><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><p>建议使用有线网络连接, 如果WIFI条件良好随意.</p><h4 id="究极无脑方案"><a href="#究极无脑方案" class="headerlink" title="究极无脑方案"></a>究极无脑方案</h4><p>购买树莓派4B及以上版本, 4G内存, 64G SD卡, 2.5A电源, 硬盘, 硬盘盒.</p><p>其他单片机也可.</p><h4 id="究极无脑方案2"><a href="#究极无脑方案2" class="headerlink" title="究极无脑方案2"></a>究极无脑方案2</h4><p>购买厂商的NAS, 例如群晖、威联通等, 直接使用, 并享受超高溢价, 一般在3000元以上.</p><p>至此硬件的搭建完成, 你现在应该拥有一台能够开机联网的电脑.</p><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>OS(Operating System)是操作系统的缩写, 是计算机硬件和软件之间的桥梁, 负责管理计算机的资源和提供用户界面. NAS的OS可以有两种选择, Windows和Linux. </p><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><p>windows 系统家喻户晓不必介绍, 但是, 由于windows的封闭性和不稳定性, 不能说不建议, 但是也不推荐使用windows作为NAS的操作系统. 因此本教程一般情况下只保证linux下的可用性.</p><p>但是, 伟大的docker让操作系统无关! 只要你的windows能够运行docker, 那么就可以基本确保与本教程大部分内容的兼容.</p><p>这里推荐(虽然不推荐)一个特别的windows 操作系统: windows server, 这是微软专门为服务器设计的操作系统, 具有更好的性能和稳定性.</p><p>iso下载地址: <a href="https://www.xitongku.com/index.html">系统库</a><br>激活工具地址: <a href="https://github.com/zbezj/HEU_KMS_Activator/releases">github下载</a></p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Linux开源, 免费, 有很多优秀的NAS软件可以使用. 非常推荐.</p><p>对于PC, 你可以使用<a href="https://ubuntu.com/download/desktop">Ubuntu</a>作为操作系统.</p><p>对于树莓派, 你可以使用树莓派官方的Raspberry Pi OS. 使用官方提供的<a href="https://www.raspberrypi.com/software/">安装工具</a>, 并根据<a href="https://shumeipai.nxez.com/2024/04/23/install-the-operating-system-for-the-raspberry-pi.html">教程</a>进行安装, 也可以<a href="https://www.raspberrypi.com/software/operating-systems/">下载iso</a>进行通用安装.</p><h5 id="烧录iso"><a href="#烧录iso" class="headerlink" title="烧录iso"></a>烧录iso</h5><p>如果你看过各种教程, 你会发现他们都让你使用工具将iso烧录到U盘, 例如:<br>使用<a href="https://etcher.balena.io/">balenaEtcher</a>把iso烧录到你想要的u盘, 然后将u盘插入电脑开机, 进入bios选取启动盘, 然后进行图形化操作.</p><p>非常简单直接, 但是这样做有十足的弊端.</p><ol><li>你的u盘只能承载一个系统</li><li>你的u盘失去了承载数据的功能</li><li>每次使用新的iso都需要重新烧录</li></ol><p>因此, 我们可以使用一个更好的方法, 使用Ventoy.</p><p>Ventoy是一个开源的U盘启动工具, 它可以让你在U盘上放置多个iso文件, 并且可以直接从U盘启动. 这样你就可以在U盘上放置多个操作系统的iso文件, 例如windows、ubuntu、树莓派等, 而且不需要重新烧录.</p><p>用提供的<a href="https://www.ventoy.net/en/download.html">下载工具</a>把ventoy安装到u盘. 随后只需要把你需要的iso文件放到u盘的根目录, 使用u盘启动, 你会发现进入一个菜单, 在这里你可以任意选择所需要的iso启动.<br>同时, 在根目录新建文件夹, 这个u盘也可以作为数据盘使用!</p><p>这里有一篇详细的<a href="https://www.cnblogs.com/linyouyi/p/16494470.html">图文化教程</a>, 可供参考.</p><h5 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h5><p>使用iso启动后, 你会进入一个小型的live系统, 这个系统是一个临时的系统, 用于安装操作系统. 你可以在这里将系统安装到硬盘上, 对于进入live系统后windows, ubuntu, 树莓派的安装, 网络上都有详尽的教程, 这里不再赘述.</p><p><a href="https://blog.csdn.net/weixin_57099902/article/details/133907808">windows server 安装</a><br><a href="https://blog.csdn.net/weixin_70137390/article/details/124724957">ubuntu安装</a><br><a href="https://shumeipai.nxez.com/2024/04/23/install-the-operating-system-for-the-raspberry-pi.html">树莓派安装</a></p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>软件是NAS的灵魂, 你可以在NAS上安装各种软件, 例如Docker、Plex、Nextcloud等. 这些软件可以帮助你实现各种功能, 例如文件共享、媒体服务器、私有云等.</p><p>在这篇基础环境中, 我们只介绍如何安装Docker, 其他软件将在后续的教程中介绍.</p><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>Docker是一个开源的应用容器引擎, 可以让开发者打包他们的应用和依赖包到一个轻量级的可移植容器中, 并且可以在任何地方运行. Docker可以帮助你快速搭建各种服务.</p><h5 id="Windows下安装Docker"><a href="#Windows下安装Docker" class="headerlink" title="Windows下安装Docker"></a>Windows下安装Docker</h5><p>在windows下安装Docker非常简单, 只需要下载<a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>, 然后安装即可.</p><h5 id="Linux下安装Docker"><a href="#Linux下安装Docker" class="headerlink" title="Linux下安装Docker"></a>Linux下安装Docker</h5><p>在Linux下安装Docker也非常简单, 执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> pkg <span class="hljs-keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="hljs-keyword">do</span> <span class="hljs-built_in">sudo</span> apt-get remove <span class="hljs-variable">$pkg</span>; <span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># Add Docker&#x27;s official GPG key:</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install ca-certificates curl<br><span class="hljs-built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings<br><span class="hljs-built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc<br><br><span class="hljs-comment"># Add the repository to Apt sources:</span><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  <span class="hljs-subst">$(. /etc/os-release &amp;&amp; echo <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;UBUNTU_CODENAME:-<span class="hljs-variable">$VERSION_CODENAME</span>&#125;</span>&quot;</span>)</span> stable&quot;</span> | \<br>  <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br><span class="hljs-built_in">sudo</span> apt-get update<br><br><span class="hljs-built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br><br><span class="hljs-built_in">sudo</span> docker run hello-world<br></code></pre></td></tr></table></figure><p>如果你使用的是树莓派, 参阅<a href="https://pidoc.cn/docs/pidoc/install_docker/">树莓派安装docker</a>即可.</p><p>至此, 你已经完成了NAS的基础环境搭建, 我将在后续的教程中介绍如何使用Docker搭建各种服务, 例如媒体服务器、私有云等.</p><h5 id="图形化docker管理"><a href="#图形化docker管理" class="headerlink" title="图形化docker管理"></a>图形化docker管理</h5><p>Portainer是一个开源的Docker容器管理工具, 可以在网页中用图形化工具管理Docker 容器. 你可以在Docker中安装Portainer(惊天大套娃), 然后通过浏览器访问Portainer的Web界面来管理Docker容器.</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><p>新建一个文件夹名为<code>portainer</code>, 在里面</p><ul><li>创建一个文件名为<code>docker-compose.yml</code>. </li><li>创建一个文件夹名为<code>data</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /.../Programfiles</span><br><span class="hljs-built_in">mkdir</span> portainer<br><span class="hljs-built_in">cd</span> portainer<br>$ /../programfiles/portainer<br><span class="hljs-built_in">touch</span> docker-compose.yml<br><span class="hljs-built_in">mkdir</span> data<br></code></pre></td></tr></table></figure><p>然后在<code>docker-compose.yml</code>中写入以下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># docker-compose.yml (无须修改)</span><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span> <br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">portainer:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">portainer/portainer-ce:lts</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">portainer</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;9443:9443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./portainer_data:/data</span>  <span class="hljs-comment"># 修改为相对路径[1][2]</span><br></code></pre></td></tr></table></figure><p>然后执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># /.../Programfiles/portainer</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>在浏览器中访问<code>http://localhost:9443</code>, 你会看到Portainer的登录界面, 输入用户名和密码即可登录.</p><p>详细的设置可参阅<a href="https://docs.portainer.io/start/install-ce/server/setup">Portainer的官方文档</a>.</p><h6 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h6><p>如果你被GFW限制了, 可以<a href="https://zhuanlan.zhihu.com/p/28662850275">尝试换源(linux)</a></p><p><a href="https://zhuanlan.zhihu.com/p/28662850275">docker换源(windows)</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NAS</tag>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
      <tag>自建服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇</title>
    <link href="/2025/04/23/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <url>/2025/04/23/%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>又把博客开起来了,这次选用hexo + github pages静态部署, 终于不用操心那些数据库之类的东西了, 而且最重要的是<strong>免费</strong>, 可惜之前的文章都没了, 我三年的心血啊.</p><p>待从头、收拾旧山河，朝天阙</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网页</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/04/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>测试 <img src="/2025/04/23/hello-world/g" alt="test.png"> 测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/23/hello-world/"/>
    <url>/2025/04/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
